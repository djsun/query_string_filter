grammar Filter

  rule match
    and_expression / simple
  end
  
  rule and_expression
    simple ospace 'and' ospace match
    {
      def eval
        simple.eval.merge(match.eval)
      end
    }
  end
  
  rule simple
    fuzzy / equality / inequality
  end
  
  rule fuzzy
    fuzzy_with_strings / fuzzy_with_string
  end

  rule fuzzy_with_strings
    key ospace ':' ospace strings
    {
      def eval
        { key.eval => /#{strings.eval('|')}/ }
      end
    }
  end
  
  rule fuzzy_with_string
    key ospace ':' ospace string
    {
      def eval
        { key.eval => /#{string.eval}/ }
      end
    }
  end
  
  rule equality
    equality_with_strings / equality_with_value
  end

  rule equality_with_strings
    key ospace '=' ospace strings
    {
      def eval
        { key.eval => strings.eval(',') }
      end
    }
  end
  
  rule equality_with_value
    key ospace '=' ospace value
    {
      def eval
        { key.eval => value.eval }
      end
    }
  end

  rule inequality
    gt / gte / lt / lte
  end
  
  # greater than
  rule gt
    key ospace '>' ospace value
    {
      def eval
        { key.eval => { '$gt' => value.eval } }
      end
    }
  end
  
  # greater than or equal
  rule gte
    key ospace '>=' ospace value
    {
      def eval
        { key.eval => { '$gte' => value.eval } }
      end
    }
  end
  
  # less than
  rule lt
    key ospace '<' ospace value
    {
      def eval
        { key.eval => { '$lt' => value.eval } }
      end
    }
  end

  # less than or equal
  rule lte
    key ospace '<=' ospace value
    {
      def eval
        { key.eval => { '$lte' => value.eval } }
      end
    }
  end
  
  rule key
    [a-z_\.]+
    {
      def eval
        text_value
      end
    }
  end
  
  rule value
    integer / boolean / string
  end
  
  rule strings
    string more:(ospace ',' ospace string)+
    {
      def eval(separator)
        strings.map { |e| e.eval }.join(separator)
      end
      
      def strings
        [string] + more.elements.map { |e| e.string }
      end
    }
  end
  
  rule boolean
    boolean_true / boolean_false
  end

  rule boolean_true
    'true'
    {
      def eval
        true
      end
    }
  end
  
  rule boolean_false
    'false'
    {
      def eval
        false
      end
    }
  end
  
  rule string
    double_quoted_string / single_quoted_string / unquoted_string
  end

  rule double_quoted_string
    '"' (!'"' .)* '"'
    {
      def eval
        text_value[1 ... -1]
      end
    }
  end

  rule single_quoted_string
    '\'' (!'\'' .)* '\''
    {
      def eval
        text_value[1 ... -1]
      end
    }
  end
  
  rule unquoted_string
    [^<>=, ]+
    {
      def eval
        text_value
      end
    }
  end

  rule integer
    [0-9]+
    {
      def eval
        text_value.to_i
      end
    }
  end
  
  rule ospace
    ' '*
  end
  
  rule space
    ' '+
  end

end
